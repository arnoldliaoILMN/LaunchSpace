"""
Accession samples into the local configuration database, either individually or by reading from a file
This also associates an app with the sample
"""

import os
import sys

# Add relative path libraries
SCRIPT_DIR = os.path.abspath(os.path.dirname(__file__))
sys.path.append(os.path.abspath(os.path.sep.join([SCRIPT_DIR, "..", "lib"])))

from ConfigurationServices import ConfigurationServices
from DataAccessCreate import DataAccessCreate


class SampleCreationException(Exception):
    pass


def get_args():
    import argparse
    parser = argparse.ArgumentParser(description='Create samples against a project')
    parser.add_argument('-p', '--project', type=str, required=True, dest="project", help='name of project')
    parser.add_argument('-f', '--file', type=str, dest="file", help="tsv file containing many samples")
    parser.add_argument('-l', '--lims', type=str, dest="lims", help="tsv containing a LIMS manifest generated by Clarity LIMS")
    parser.add_argument('-a', '--app', type=str, dest="app", help='name of app to attach to sample')
    parser.add_argument('-n', '--name', type=str, dest="name", help='name of sample')
    parser.add_argument('-r', '--related', type=str, dest="related", help="related sample name")
    parser.add_argument('-e', '--relationship', type=str, dest="relationship", help='name of relationship')

    args = parser.parse_args()
    return args

if __name__ == "__main__":
    args = get_args()

    if args.file and args.lims:
        print "don't specify both a file and a LIMS file!"
        sys.exit(1)

    configuration_services = ConfigurationServices()
    db_config = configuration_services.get_config("DBFile")
    data_access_create = DataAccessCreate(db_config, configuration_services)

    project_name = args.project
    if args.file:
        samples, relationships = data_access_create.configure_samples_from_file(project_name, args.file)
    elif args.lims:
        samples, relationships = data_access_create.add_samples_from_lims_file(project_name, args.lims)
    elif args.name:
        if not args.app:
            print "if you specify a sample, you need to specify an app"
            sys.exit(1)
        # build up the variables we need to create the sample(s) and any specified relationships
        sample_name = args.name
        app_name = args.app
        samples = set()
        relationships = set()
        sample = data_access_create.add_sample(sample_name, project_name)
        # keep track of the samples we build so we can report on them
        if sample:
            samples.add(sample)
        data_access_create.add_sample_app(sample_name, app_name)
        if args.related or args.relationship:
            if not args.related or not args.relationship:
                print "to add a relationship need both related sample and relationship name"
                sys.exit(1)
            # if a relationship has been specified, create the target sample...
            to_sample_name = args.related
            relationship_name = args.relationship
            to_sample = data_access_create.add_sample(to_sample_name, project_name)
            if to_sample:
                samples.add(to_sample)
            # ... and then create the relationship
            relationship = data_access_create.add_sample_relationship(
                from_sample=sample,
                to_sample=to_sample,
                relationship_name=relationship_name
            )
            relationships.add(relationship)

    else:
        print "need to specify a tsv file or a LIMS-generated tsv file"
        sys.exit(1)

    print "Created %i samples with %i relationships" % (len(samples), len(relationships))
